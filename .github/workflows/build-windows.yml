name: Build Windows Executable

on:
  push:
    branches: [ nuitka ]
  workflow_dispatch:  # Allows manual trigger from GitHub website

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours max to avoid timeout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka zstandard ordered-set
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install nibabel pydicom opencv-python pillow scipy scikit-image scikit-learn
        pip install numpy pandas matplotlib pyyaml argparse
    
    - name: Download model checkpoints (if needed)
      run: |
        # Create checkpoints directory if it doesn't exist
        if (!(Test-Path "checkpoints")) { New-Item -ItemType Directory -Path "checkpoints" }
        echo "Checkpoints directory ready"
    
    - name: Fix Python path for imports
      run: |
        $content = @"
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))
"@
        $content | Out-File -FilePath "path_fix.py" -Encoding utf8
        
        # Combine path fix with inference.py
        $pathFix = Get-Content "path_fix.py" -Raw
        $inference = Get-Content "inference.py" -Raw
        $combined = $pathFix + "`n" + $inference
        $combined | Out-File -FilePath "inference_fixed.py" -Encoding utf8
    
    - name: Build inference.exe with Nuitka
      run: |
        python -m nuitka --standalone --assume-yes-for-downloads --output-dir=dist --follow-imports --include-data-dir=configs=configs --include-data-dir=src=src inference_fixed.py
    
    - name: Test executable exists
      run: |
        dir dist\
        if (Test-Path "dist\inference_fixed.dist\inference_fixed.exe") {
          echo "✓ Build completed successfully!"
        } else {
          echo "✗ Build failed - executable not found"
          exit 1
        }
    
    - name: Create release package
      run: |
        # Create a clean distribution folder
        New-Item -ItemType Directory -Path "dcx-windows" -Force
        
        # Copy the executable and required folders
        Copy-Item "dist\inference_fixed.dist\*" "dcx-windows\" -Recurse
        Copy-Item "configs" "dcx-windows\" -Recurse -Force
        Copy-Item "README.md" "dcx-windows\" -Force
        
        # Create a simple batch file for easy execution
        $batchContent = @"
@echo off
echo DCX Medical Imaging Inference - Windows Build
echo.
echo Usage: inference_fixed.exe --module [module] --input_path [input] --output_dir [output]
echo.
echo Available modules: lung, heart, airway, bone, covid, vessel, aorta, diameter, ctr, peripheral
echo.
echo Example: inference_fixed.exe --module lung --input_path input.dcm --output_dir results
echo.
pause
"@
        $batchContent | Out-File -FilePath "dcx-windows\run_dcx.bat" -Encoding ascii
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: dcx-windows-executable
        path: dcx-windows/
        retention-days: 30
    
    - name: Upload build logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          *.log
          dist/
        retention-days: 7